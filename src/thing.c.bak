
int main()
{
    rmw_uros_set_custom_transport(
		true,
		NULL,
		pico_serial_transport_open,
		pico_serial_transport_close,
		pico_serial_transport_write,
		pico_serial_transport_read
	);

    gpio_init(LED_PIN);
    gpio_set_dir(LED_PIN, GPIO_OUT);

    rcl_timer_t timer;
    rcl_node_t node;
    rcl_allocator_t allocator;
    rclc_support_t support;
    rclc_executor_t executor;

    allocator = rcl_get_default_allocator();

    // Wait for agent successful ping for 2 minutes.
    const int timeout_ms = 1000;
    const uint8_t attempts = 120;

    rcl_ret_t ret = rmw_uros_ping_agent(timeout_ms, attempts);

    if (ret != RCL_RET_OK)
    {
        // Unreachable agent, exiting program.
        return ret;
    }

    rclc_support_init(&support, 0, NULL, &allocator);

    rclc_node_init_default(&node, "pico_node", "kouhai_node", &support);
    rcl_ret_t pucretval = rclc_publisher_init_default(
        &publisher,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
        "kouhai");

    if (pucretval != RCL_RET_OK) {
      rcl_ret_t pubret = rcl_publisher_fini(&publisher, &node);
      
      return -1;
    }




    rcl_ret_t returnval = rclc_subscription_init_default(
				   &subescriber,
				   &node,
				   ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
				   "say_something");

   

    if (returnval != RCL_RET_OK) {
      rcl_ret_t pubret = rcl_publisher_fini(&publisher, &node);
      
      // Destroy subscriber
      rcl_ret_t subret = rcl_subscription_fini(&subescriber, &node);
      return -1;
    }




    rclc_timer_init_default(
        &timer,
        &support,
        RCL_MS_TO_NS(1000),
        timer_callback);

    rclc_executor_init(&executor, &support.context, 2, &allocator);
    rclc_executor_add_timer(&executor, &timer);
    rclc_executor_add_subscription(&executor, &subescriber, &from_sub_msg, subescription_callback, ON_NEW_DATA);

    gpio_put(LED_PIN, 1);



    msg.data = 32;
    
    while (true)
    {
        rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
    }
    return 0;
}
